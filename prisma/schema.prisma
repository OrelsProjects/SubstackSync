// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Interval {
  month
  year
}

enum Plan {
  standard
  premium
  hobbyist
}

enum FeatureFlag {
  advancedGPT
  articles
  advancedFiltering
  instantPost
  populateNotes
  collaborativeNotes
  initQueue
  scheduleNotes
  canViewWriters
  canUseRadar
  canAutoDM
  chat
  ghostwriter
  unlimitedTokens
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userMetadata UserMetadata?
  Settings     Settings?

  // Gmail and Kit integration
  gmailIntegration GmailIntegration?
  kitIntegration   KitIntegration?
  subscriberLogs   SubscriberLog[]
  Subscription     Subscription[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // custom fields
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@map("authenticators")
}

model UserMetadata {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  isAdmin Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userMetadata")
}

model Settings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

// Gmail Integration
model GmailIntegration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  email        String
  refreshToken String
  watchExpiry  DateTime?
  historyId    String?

  isWatching Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gmailIntegrations")
}

// Kit integration
model KitIntegration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  apiKey    String
  apiSecret String?

  // Tag configuration
  freeSubscriberTagIds Int[] @default([])
  paidSubscriberTagIds Int[] @default([])
  defaultTagIds        Int[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kitIntegrations")
}

// Subscriber Log
model SubscriberLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriberEmail  String
  subscriberName   String?
  subscriptionType String // "free" or "paid"
  subscriptionPlan String? // e.g., "$15 a month"
  source           String? // e.g., "Substack App"

  // Processing status
  processedAt     DateTime?
  addedToKit      Boolean   @default(false)
  kitSubscriberId String?
  error           String?

  // Raw email data for debugging
  gmailMessageId String @unique
  rawEmailData   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, subscriberEmail])
  @@map("subscriberLogs")
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  plan        Plan
  stripeSubId String    @unique // The Stripe subscription ID
  status      String // "active", "canceled", etc.
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isTrialing  Boolean   @default(false)
  trialStart  DateTime?
  trialEnd    DateTime?

  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  interval Interval @default(month)

  couponIdApplied String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
